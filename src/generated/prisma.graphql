# source: http://192.168.99.100:4466
# timestamp: Sat Jan 04 2020 19:05:57 GMT-0600 (Central Standard Time)

type AggregateAnnotation {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Annotation implements Node {
  id: ID!
  createdAt: DateTime!
  quote: String!
  note: [String!]!
  chapter: String!
  page: Int
  title: String!
  parent: Book!
  favorite: Boolean!
  tags: [String!]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

"""A connection to a list of items."""
type AnnotationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnnotationEdge]!
  aggregate: AggregateAnnotation!
}

input AnnotationCreateInput {
  id: ID
  quote: String!
  chapter: String!
  page: Int
  title: String!
  favorite: Boolean
  note: AnnotationCreatenoteInput
  tags: AnnotationCreatetagsInput
  parent: BookCreateOneWithoutAnnotationsInput!
  groups: GroupCreateManyWithoutAnnotationsInput
}

input AnnotationCreateManyWithoutGroupsInput {
  create: [AnnotationCreateWithoutGroupsInput!]
  connect: [AnnotationWhereUniqueInput!]
}

input AnnotationCreateManyWithoutParentInput {
  create: [AnnotationCreateWithoutParentInput!]
  connect: [AnnotationWhereUniqueInput!]
}

input AnnotationCreatenoteInput {
  set: [String!]
}

input AnnotationCreatetagsInput {
  set: [String!]
}

input AnnotationCreateWithoutGroupsInput {
  id: ID
  quote: String!
  chapter: String!
  page: Int
  title: String!
  favorite: Boolean
  note: AnnotationCreatenoteInput
  tags: AnnotationCreatetagsInput
  parent: BookCreateOneWithoutAnnotationsInput!
}

input AnnotationCreateWithoutParentInput {
  id: ID
  quote: String!
  chapter: String!
  page: Int
  title: String!
  favorite: Boolean
  note: AnnotationCreatenoteInput
  tags: AnnotationCreatetagsInput
  groups: GroupCreateManyWithoutAnnotationsInput
}

"""An edge in a connection."""
type AnnotationEdge {
  """The item at the end of the edge."""
  node: Annotation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnnotationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  quote_ASC
  quote_DESC
  chapter_ASC
  chapter_DESC
  page_ASC
  page_DESC
  title_ASC
  title_DESC
  favorite_ASC
  favorite_DESC
}

type AnnotationPreviousValues {
  id: ID!
  createdAt: DateTime!
  quote: String!
  note: [String!]!
  chapter: String!
  page: Int
  title: String!
  favorite: Boolean!
  tags: [String!]!
}

input AnnotationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnotationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnotationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnotationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  quote: String

  """All values that are not equal to given value."""
  quote_not: String

  """All values that are contained in given list."""
  quote_in: [String!]

  """All values that are not contained in given list."""
  quote_not_in: [String!]

  """All values less than the given value."""
  quote_lt: String

  """All values less than or equal the given value."""
  quote_lte: String

  """All values greater than the given value."""
  quote_gt: String

  """All values greater than or equal the given value."""
  quote_gte: String

  """All values containing the given string."""
  quote_contains: String

  """All values not containing the given string."""
  quote_not_contains: String

  """All values starting with the given string."""
  quote_starts_with: String

  """All values not starting with the given string."""
  quote_not_starts_with: String

  """All values ending with the given string."""
  quote_ends_with: String

  """All values not ending with the given string."""
  quote_not_ends_with: String
  chapter: String

  """All values that are not equal to given value."""
  chapter_not: String

  """All values that are contained in given list."""
  chapter_in: [String!]

  """All values that are not contained in given list."""
  chapter_not_in: [String!]

  """All values less than the given value."""
  chapter_lt: String

  """All values less than or equal the given value."""
  chapter_lte: String

  """All values greater than the given value."""
  chapter_gt: String

  """All values greater than or equal the given value."""
  chapter_gte: String

  """All values containing the given string."""
  chapter_contains: String

  """All values not containing the given string."""
  chapter_not_contains: String

  """All values starting with the given string."""
  chapter_starts_with: String

  """All values not starting with the given string."""
  chapter_not_starts_with: String

  """All values ending with the given string."""
  chapter_ends_with: String

  """All values not ending with the given string."""
  chapter_not_ends_with: String
  page: Int

  """All values that are not equal to given value."""
  page_not: Int

  """All values that are contained in given list."""
  page_in: [Int!]

  """All values that are not contained in given list."""
  page_not_in: [Int!]

  """All values less than the given value."""
  page_lt: Int

  """All values less than or equal the given value."""
  page_lte: Int

  """All values greater than the given value."""
  page_gt: Int

  """All values greater than or equal the given value."""
  page_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  favorite: Boolean

  """All values that are not equal to given value."""
  favorite_not: Boolean
}

type AnnotationSubscriptionPayload {
  mutation: MutationType!
  node: Annotation
  updatedFields: [String!]
  previousValues: AnnotationPreviousValues
}

input AnnotationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnotationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnotationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnotationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnnotationWhereInput
}

input AnnotationUpdateInput {
  quote: String
  chapter: String
  page: Int
  title: String
  favorite: Boolean
  note: AnnotationUpdatenoteInput
  tags: AnnotationUpdatetagsInput
  parent: BookUpdateOneRequiredWithoutAnnotationsInput
  groups: GroupUpdateManyWithoutAnnotationsInput
}

input AnnotationUpdateManyDataInput {
  quote: String
  chapter: String
  page: Int
  title: String
  favorite: Boolean
  note: AnnotationUpdatenoteInput
  tags: AnnotationUpdatetagsInput
}

input AnnotationUpdateManyMutationInput {
  quote: String
  chapter: String
  page: Int
  title: String
  favorite: Boolean
  note: AnnotationUpdatenoteInput
  tags: AnnotationUpdatetagsInput
}

input AnnotationUpdateManyWithoutGroupsInput {
  create: [AnnotationCreateWithoutGroupsInput!]
  connect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  delete: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutGroupsInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnotationScalarWhereInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutGroupsInput!]
}

input AnnotationUpdateManyWithoutParentInput {
  create: [AnnotationCreateWithoutParentInput!]
  connect: [AnnotationWhereUniqueInput!]
  set: [AnnotationWhereUniqueInput!]
  disconnect: [AnnotationWhereUniqueInput!]
  delete: [AnnotationWhereUniqueInput!]
  update: [AnnotationUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [AnnotationUpdateManyWithWhereNestedInput!]
  deleteMany: [AnnotationScalarWhereInput!]
  upsert: [AnnotationUpsertWithWhereUniqueWithoutParentInput!]
}

input AnnotationUpdateManyWithWhereNestedInput {
  where: AnnotationScalarWhereInput!
  data: AnnotationUpdateManyDataInput!
}

input AnnotationUpdatenoteInput {
  set: [String!]
}

input AnnotationUpdatetagsInput {
  set: [String!]
}

input AnnotationUpdateWithoutGroupsDataInput {
  quote: String
  chapter: String
  page: Int
  title: String
  favorite: Boolean
  note: AnnotationUpdatenoteInput
  tags: AnnotationUpdatetagsInput
  parent: BookUpdateOneRequiredWithoutAnnotationsInput
}

input AnnotationUpdateWithoutParentDataInput {
  quote: String
  chapter: String
  page: Int
  title: String
  favorite: Boolean
  note: AnnotationUpdatenoteInput
  tags: AnnotationUpdatetagsInput
  groups: GroupUpdateManyWithoutAnnotationsInput
}

input AnnotationUpdateWithWhereUniqueWithoutGroupsInput {
  where: AnnotationWhereUniqueInput!
  data: AnnotationUpdateWithoutGroupsDataInput!
}

input AnnotationUpdateWithWhereUniqueWithoutParentInput {
  where: AnnotationWhereUniqueInput!
  data: AnnotationUpdateWithoutParentDataInput!
}

input AnnotationUpsertWithWhereUniqueWithoutGroupsInput {
  where: AnnotationWhereUniqueInput!
  update: AnnotationUpdateWithoutGroupsDataInput!
  create: AnnotationCreateWithoutGroupsInput!
}

input AnnotationUpsertWithWhereUniqueWithoutParentInput {
  where: AnnotationWhereUniqueInput!
  update: AnnotationUpdateWithoutParentDataInput!
  create: AnnotationCreateWithoutParentInput!
}

input AnnotationWhereInput {
  """Logical AND on all given filters."""
  AND: [AnnotationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnnotationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnnotationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  quote: String

  """All values that are not equal to given value."""
  quote_not: String

  """All values that are contained in given list."""
  quote_in: [String!]

  """All values that are not contained in given list."""
  quote_not_in: [String!]

  """All values less than the given value."""
  quote_lt: String

  """All values less than or equal the given value."""
  quote_lte: String

  """All values greater than the given value."""
  quote_gt: String

  """All values greater than or equal the given value."""
  quote_gte: String

  """All values containing the given string."""
  quote_contains: String

  """All values not containing the given string."""
  quote_not_contains: String

  """All values starting with the given string."""
  quote_starts_with: String

  """All values not starting with the given string."""
  quote_not_starts_with: String

  """All values ending with the given string."""
  quote_ends_with: String

  """All values not ending with the given string."""
  quote_not_ends_with: String
  chapter: String

  """All values that are not equal to given value."""
  chapter_not: String

  """All values that are contained in given list."""
  chapter_in: [String!]

  """All values that are not contained in given list."""
  chapter_not_in: [String!]

  """All values less than the given value."""
  chapter_lt: String

  """All values less than or equal the given value."""
  chapter_lte: String

  """All values greater than the given value."""
  chapter_gt: String

  """All values greater than or equal the given value."""
  chapter_gte: String

  """All values containing the given string."""
  chapter_contains: String

  """All values not containing the given string."""
  chapter_not_contains: String

  """All values starting with the given string."""
  chapter_starts_with: String

  """All values not starting with the given string."""
  chapter_not_starts_with: String

  """All values ending with the given string."""
  chapter_ends_with: String

  """All values not ending with the given string."""
  chapter_not_ends_with: String
  page: Int

  """All values that are not equal to given value."""
  page_not: Int

  """All values that are contained in given list."""
  page_in: [Int!]

  """All values that are not contained in given list."""
  page_not_in: [Int!]

  """All values less than the given value."""
  page_lt: Int

  """All values less than or equal the given value."""
  page_lte: Int

  """All values greater than the given value."""
  page_gt: Int

  """All values greater than or equal the given value."""
  page_gte: Int
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  favorite: Boolean

  """All values that are not equal to given value."""
  favorite_not: Boolean
  parent: BookWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
}

input AnnotationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Book implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  author: User!
  annotations(where: AnnotationWhereInput, orderBy: AnnotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Annotation!]
}

"""A connection to a list of items."""
type BookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutBooksInput!
  annotations: AnnotationCreateManyWithoutParentInput
}

input BookCreateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneWithoutAnnotationsInput {
  create: BookCreateWithoutAnnotationsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutAnnotationsInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutBooksInput!
}

input BookCreateWithoutAuthorInput {
  id: ID
  title: String!
  annotations: AnnotationCreateManyWithoutParentInput
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
}

type BookPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
}

input BookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [BookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BookWhereInput
}

input BookUpdateInput {
  title: String
  author: UserUpdateOneRequiredWithoutBooksInput
  annotations: AnnotationUpdateManyWithoutParentInput
}

input BookUpdateManyDataInput {
  title: String
}

input BookUpdateManyMutationInput {
  title: String
}

input BookUpdateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  delete: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
  deleteMany: [BookScalarWhereInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateOneRequiredWithoutAnnotationsInput {
  create: BookCreateWithoutAnnotationsInput
  connect: BookWhereUniqueInput
  update: BookUpdateWithoutAnnotationsDataInput
  upsert: BookUpsertWithoutAnnotationsInput
}

input BookUpdateWithoutAnnotationsDataInput {
  title: String
  author: UserUpdateOneRequiredWithoutBooksInput
}

input BookUpdateWithoutAuthorDataInput {
  title: String
  annotations: AnnotationUpdateManyWithoutParentInput
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutAuthorDataInput!
}

input BookUpsertWithoutAnnotationsInput {
  update: BookUpdateWithoutAnnotationsDataInput!
  create: BookCreateWithoutAnnotationsInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutAuthorDataInput!
  create: BookCreateWithoutAuthorInput!
}

input BookWhereInput {
  """Logical AND on all given filters."""
  AND: [BookWhereInput!]

  """Logical OR on all given filters."""
  OR: [BookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: UserWhereInput
  annotations_every: AnnotationWhereInput
  annotations_some: AnnotationWhereInput
  annotations_none: AnnotationWhereInput
}

input BookWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group implements Node {
  id: ID!
  title: String!
  author: User!
  annotations(where: AnnotationWhereInput, orderBy: AnnotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Annotation!]
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutGroupsInput!
  annotations: AnnotationCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutAnnotationsInput {
  create: [GroupCreateWithoutAnnotationsInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutAuthorInput {
  create: [GroupCreateWithoutAuthorInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutAnnotationsInput {
  id: ID
  title: String!
  author: UserCreateOneWithoutGroupsInput!
}

input GroupCreateWithoutAuthorInput {
  id: ID
  title: String!
  annotations: AnnotationCreateManyWithoutGroupsInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
}

type GroupPreviousValues {
  id: ID!
  title: String!
}

input GroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  title: String
  author: UserUpdateOneRequiredWithoutGroupsInput
  annotations: AnnotationUpdateManyWithoutGroupsInput
}

input GroupUpdateManyDataInput {
  title: String
}

input GroupUpdateManyMutationInput {
  title: String
}

input GroupUpdateManyWithoutAnnotationsInput {
  create: [GroupCreateWithoutAnnotationsInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutAnnotationsInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutAnnotationsInput!]
}

input GroupUpdateManyWithoutAuthorInput {
  create: [GroupCreateWithoutAuthorInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutAuthorInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateWithoutAnnotationsDataInput {
  title: String
  author: UserUpdateOneRequiredWithoutGroupsInput
}

input GroupUpdateWithoutAuthorDataInput {
  title: String
  annotations: AnnotationUpdateManyWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutAnnotationsInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutAnnotationsDataInput!
}

input GroupUpdateWithWhereUniqueWithoutAuthorInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutAuthorDataInput!
}

input GroupUpsertWithWhereUniqueWithoutAnnotationsInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutAnnotationsDataInput!
  create: GroupCreateWithoutAnnotationsInput!
}

input GroupUpsertWithWhereUniqueWithoutAuthorInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutAuthorDataInput!
  create: GroupCreateWithoutAuthorInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  author: UserWhereInput
  annotations_every: AnnotationWhereInput
  annotations_some: AnnotationWhereInput
  annotations_none: AnnotationWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAnnotation(data: AnnotationCreateInput!): Annotation!
  createBook(data: BookCreateInput!): Book!
  createGroup(data: GroupCreateInput!): Group!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAnnotation(data: AnnotationUpdateInput!, where: AnnotationWhereUniqueInput!): Annotation
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAnnotation(where: AnnotationWhereUniqueInput!): Annotation
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteGroup(where: GroupWhereUniqueInput!): Group
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAnnotation(where: AnnotationWhereUniqueInput!, create: AnnotationCreateInput!, update: AnnotationUpdateInput!): Annotation!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyAnnotations(data: AnnotationUpdateManyMutationInput!, where: AnnotationWhereInput): BatchPayload!
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAnnotations(where: AnnotationWhereInput): BatchPayload!
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  annotations(where: AnnotationWhereInput, orderBy: AnnotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Annotation]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  user(where: UserWhereUniqueInput!): User
  annotation(where: AnnotationWhereUniqueInput!): Annotation
  book(where: BookWhereUniqueInput!): Book
  group(where: GroupWhereUniqueInput!): Group
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  annotationsConnection(where: AnnotationWhereInput, orderBy: AnnotationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnnotationConnection!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  annotation(where: AnnotationSubscriptionWhereInput): AnnotationSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  email: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  books: BookCreateManyWithoutAuthorInput
  groups: GroupCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBooksInput {
  id: ID
  name: String!
  email: String!
  groups: GroupCreateManyWithoutAuthorInput
}

input UserCreateWithoutGroupsInput {
  id: ID
  name: String!
  email: String!
  books: BookCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  books: BookUpdateManyWithoutAuthorInput
  groups: GroupUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
}

input UserUpdateOneRequiredWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutGroupsDataInput
  upsert: UserUpsertWithoutGroupsInput
}

input UserUpdateWithoutBooksDataInput {
  name: String
  email: String
  groups: GroupUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  email: String
  books: BookUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput!
  create: UserCreateWithoutBooksInput!
}

input UserUpsertWithoutGroupsInput {
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
